import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;


@SuppressWarnings({"rawtypes","unchecked"})
public class Main {
  public static void main(String[] args) {
    Iterable iterable = (Iterable) Lists.newArrayList(
      1,
      2,
      Lists.newArrayList(
          "2.a.",
          Lists.newArrayList("2.a.ii"),
          "2.b."),
      3,
      4);

    /* expected output:
          Result:
           1
           2
           2.a.
           2.a.ii
           2.b.
           3
           4
     */

    //Iterator iter = createFlattenedIterator(iterable);
    System.out.println("Result:");
    while (iter.hasNext()) {
      System.out.println(" " + iter.next());
    }
    System.out.println();
  }; 
}


class DeepIterator implements Iterator {
	private Stack<Iterator<Object>> stk;
	private Object next;
	private boolean hasNextCalled = false;
	
	public DeepIterator(Iterable iter) {
		stk = new Stack<Iterator<Object>>();
		stk.push(iter.iterator());
	}
	
	private void iterateNext() {
		Iterator temp = stk.peek();
		
		if(stk.empty()) {
			next = null;
			return;
		}
		else {
			if(temp.hasNext()) {
				Object elmt = temp.next();
				
				if(elmt instanceof Integer) {
					next = (Integer)elmt;
				}
				else if(elmt instanceof Iterable) {
					stk.push((Iterable)elmt.iterator());
					iterateNext();
				}
				else {
					throw new UndefinedDataType();
				}
				return;
			}
			else {
				stk.pop();
				iterateNext();
			}
		}
	}
	
	@Override
	public Object next() {
		iterateNext();
		if(next != null)
			Object res = next;
			stk.pop();
			//hasNextCalled = false;
			return (Integer)res;
		}
		else {
			throw new NoSuchElementException();
		}
	}
	
	@Override
	public boolean hasNext() {
		iterateNext();
		if(next != null) return true;
		
		return false;
	}
	
}

//// Standard interfaces for reference below:
//
//interface Iterator<E> {
//	
//	/**
//    * @return the next element in the collection
//    * @throws NoSuchElementException if there are no more elements
//    */
//   E next();
//
//   /**
//    * @return true if there is at least one more element in the collection
//    */
//   boolean hasNext();
//
//   /**
//    * @throws IllegalStateException if next has not yet been called or remove
//    *         has already been called since the last call to next.
//    * @throws UnsupportedOperationException if this Iterator does not support
//    *         the remove operation.
//    */
//   void remove();
//}
//
//interface Iterable<E> {
//   Iterator<E> iterator();
//}

